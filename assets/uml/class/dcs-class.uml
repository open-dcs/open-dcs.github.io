@startuml

/' OpenDCS UML
 '
 ' Language: Vala
 '
 ' Because Vala uses public properties and can generate getters and setters
 ' using syntactic sugar any public property will be assumed to have an
 ' associated get/set. Other property cases will be documented.
 '
 ' If a class contains only properties and methods the separators will not be
 ' modified allowing plantuml to put each where they belong. In the case that
 ' the class contains signals and/or getters and setters it will use:
 '
 ' class Foo {
 '     int foo_prop
 '     -- signals --
 '     void foo_signal ()
 '     ---- ' force a blank line
 '     void foo_method ()
 '     .. get/set ..
 '     int get_foo_prop ()
 '     void set_foo_prop (int foo)
 ' }
 '/

title OpenDCS UML

left to right direction

page 2x2

package "Dcs" #DDDDDD {

    top to bottom direction

    'Enumerations

    enum FactoryError {
        TYPE_NOT_FOUND
    }

    enum LogLevel {
        LEVEL_TRACE
    }

    enum MessageType {
        UNKNOWN,
        ALERT,
        ERROR,
        INFO,
        WARNING
    }

    '
    ' Interfaces
    '

    interface Object {
        +{abstract} string id
        +virtual bool equal (Object a, Object b)
        +virtual int compare (Object a)
        +virtual string to_string ()
    }


    interface Buildable {
        #{abstract} abstract string xml  ' need to deprecate these
        #{abstract} abstract string xsd  '  "
        +{abstract} {static} abstract static Xml.Node* node
        +{static} unowned static string get_xml_default ()
        +{static} unowned static string get_xsd_default ()
        ~{abstract} void build_from_xml_node (Xml.Node* node)
    }

    interface CldAdapter {
        #{abstract} bool satisfied
        -- signals --
        +void request_object (string id)
        ----
        +{abstract} void offer_cld_object (Object object)
        +virtual async void nap (uint interval, int priority)
        #{abstract} async void request_data ()
    }

    interface Container {
        +{abstract} abstract Gee.Map<string, Object> objects
        -- signals --
        +{abstract} abstract signal void object_added (string id)
        +{abstract} abstract signal void object_removed (string id)
        +{abstract} abstract signal void request_object (string id)
        ----
        +virtual void add_child (Object object)
        +virtual void remove_child (Object object)
        +{abstract} abstract void update_objects (Gee.Map<string, Dcs.Object> val)
        +virtual Object? get_object (string id)
        +virtual Gee.Map<string, Object> get_object_map (GLib.Type type)
        +virtual Gee.Map<string, Object> get_children (GLib.Type type)
        +virtual void sort_objects ()
        +virtual void print_objects (int depth)
    }

    interface ReferenceContainer {
        +
    }

    interface Serializable {
        --properties--
        string serial_data
        --methods--
        +{abstract} abstract void serialize ()
        +{abstract} abstract void deserialize (string data)
    }

    interface Factory {
        -- signals --
        +void build_complete ()
        --methods--
        +{abstract} Gee.TreeMap<string, Object> make_object_map (Xml.Node* node)
        +{abstract} Object make_object (GLib.Type type) throws GLib.Error
        +{abstract} Object make_object_from_node (Xml.Node* node) throws GLib.Error
    }


    ' TODO Needs to be written still
    ' XXX What is a view supposed to do in an MVC?
    'interface View {
    '    #Dcs.Model model
    '    #void connect (Dcs.ModelUpdateFunc model_func)
    '}

    '
    ' Classes
    '
    /'

    abstract class AbstractObject {

    }

    abstract class AbstractContainer {

    }

    abstract class Controller {
        #Dcs.Model model
        #Dcs.View view
        +bool admin
        -- signals --
        +void acquisition_state_changed (bool state)
        ----
        +Controller (Model, View)
        -~Controller ()
        +{abstract} void update_view ()
        +{abstract} void add (Object object, string path)
        +{abstract} void remove (string path)
        #void save_requested_cb ()
        +void start_acquisition ()
        +void stop_acquisition ()
        +void start_device_output ()
        +void stop_device_output ()
    }

    class DataSeries {
        +string ch_ref
        +Cld.Channel channel
        +int buffer_size
        +int stride
        +string id
        #string xml
        #string xsd
        #virtual Xml.Node* node
        #bool satisfied
        ~void build_from_xml_node
        +void offer_cld_object (Cld.Object object)
        #async void request_data ()
        +SimplePoint[] to_array ()
    }

    class DBusInterface {
        +const string SERVICE_NAME
        +const string OBJECT_PATH
        +{abstract} void shutdown () throws GLib.IOError
    }

    class Message {
        +Message()
        +Message.alert ()
        +Message.error ()
        +Message.info ()
        +Message.warning ()
        +{abstract} void pack ()
        +{abstract} void unpack ()
    }

    class Model {
        +string name
        +bool admin
        +bool def_enabled
        +Gee.Map<string, Object> objects
        +string config_filename
        +bool active
        +bool verbose
        ~ApplicationConfig config
        ~Cld.XmlConfig xml
        ~Cld.Context ctx
        ~GLib.Settings settings
        -- signals --
        +void log_state_changed (string log, bool state)
        +void updated ()
        ----
        +Model (string config_filename)
        +void update_objects (Gee.Map<string, Object> val)
        .. get/set ..
        +ApplicationConfig get_config ()
        +Cld.XmlConfig get_xml ()
        +Cld.Context get_ctx ()
        +GLib.Settings get_settings ()
    }

    class Point <<compact>> {
        +double x
        +double y
        +Point (double x, double y)
    }

    class SysLog {
        +{static} int verbosity
        +{static} unowned SysLog get_default ()
        +{static} void init (bool stdout, string? filename)
        +{static} void shutdown ()
        +{static} void increase_verbosity ()
    }
    '/

    /'
     'box Delegates {
     '    +void ModelUpdateFunc ()
     '}
     '/

    '
    ' Associations
    '

    Object <|-- GLib.Object
    Buildable <|-- GLib.Object
    Container <|-- GLib.Object
    ReferenceContainer <|-- GLib.Object
    Serializable <|-- GLib.Object
    CldAdapter <|-- GLib.Object
    Factory <|-- GLib.Object
    AbstractObject <|.. Object
    AbstractObject <|.. Buildable
    AbstractObject <|-- AbstractContainer
    AbstractObject <|.. ReferenceContainer
    AbstractObject <|.. Serializable
    AbstractContainer <|.. Container
    DataSeries <|.. CldAdapter
    DataSeries <|-- AbstractObject

/'
    Controller --|> GLib.Object
    DataSeries --|> GLib.Object
    DataSeries ..|> Object
    DataSeries ..|> Buildable
    DBusInterface --|> GLib.Object
    Message --|> GLib.Object
    Model --|> GLib.Object
    Model ..|> Container
    Point --|> GLib.Object
    SysLog --|> GLib.Object
    View --|> GLib.Object
    /'

    '
    ' Notes
    '

    legend right
        OpenDCS is built using the Vala language which can use special syntax
        to define property getters and setters with scope that's different from
        the property itself. For instance:
            <i>public int value { get; private set; }</i>
        which will result in a public getter and a private setter. UML has no
        way of displaying this if so it should be implied that any property that
        is marked public (+) will also have a public get/set, and if a property
        should specify scope it will be marked as internal (~).
    end legend

    note top of SysLog: Bad name, planning on changing

    note top of Message
        This should probably be a compact class.
        Other namespaces will contain message classes
        as well that are more specific to the scope.
    end note

    /'
    package "UI" {

        '
        ' Enumerations
        '

        enum Orientation {
            HORIZONTAL,
            VERTICAL
        }

        enum PositionType {
            LEFT,
            RIGHT,
            TOP,
            BOTTOM
        }

        enum PolarAxisType {
            MAGNITUDE,
            ANGLE
        }

        enum ColorGradientType {
            RGB,
            HSV
        }

        '
        ' Interfaces
        '

        interface Widget {
            -- properties --
            +{abstract} bool fill
        }

        '
        ' Classes
        '

        abstract class Canvas {
            +virtual string id
        }

        abstract class SimpleWidget {
            +virtual string id
            +{abstract} string xml
            +{abstract} string xsd
            #virtual Xml.Node* node
            +bool fill
            +{abstract} void build_from_xml_node (Xml.Node* node)
            #{abstract} void update_node ()
        }

        abstract class CustomWidget {
            +virtual string id
            +{abstract} string xml
            +{abstract} string xsd
            #virtual Xml.Node* node
            +bool fill
            +{abstract} void build_from_xml_node (Xml.Node* node)
            #{abstract} void update_node ()
        }

        abstract class CompositeWidget {
            +virtual string id
            +{abstract} string xml
            +{abstract} string xsd
            #virtual Xml.Node* node
            +bool fill
            +{abstract} Gee.Map<string, Object> objects
            +{abstract} void build_from_xml_node (Xml.Node* node)
            #{abstract} void update_objects (Gee.Map<string, Object> val)
        }

        '
        ' Associations
        '

        Widget --|> GLib.Object
        Canvas --|> Gtk.DrawingArea
        Canvas ..|> Object
        SimpleWidget --|> Gtk.Box
        SimpleWidget ..|> Widget
        SimpleWidget ..|> Buildable
        SimpleWidget ..|> Object
        CustomWidget --|> Gtk.DrawingArea
        CustomWidget ..|> Widget
        CustomWidget ..|> Buildable
        CustomWidget ..|> Object
        CompositeWidget --|> Gtk.Box
        CompositeWidget ..|> Widget
        CompositeWidget ..|> Container
        CompositeWidget ..|> Buildable
        CompositeWidget ..|> Object

        '
        ' Notes
        '

        note top of CompositeWidget
            This is just a simple widget that implements Container.
            Could probably just simplify it down to
            "Dcs.UI.CompositeWidget : Dcs.UI.SimpleWidget, Dcs.Container"
        end note
    }
    '/
    package "CLI" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }

    package "Control" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        class Control.Factory {

        }

        '
        ' Associations
        '
        Control.Factory <|.. Factory

        '
        ' Notes
        '
    }

    package "DAQ" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        interface AChannel {

        }

        interface IChannel {

        }

        '
        ' Classes
        '

        class AIChannel {

        }

        class DAQ.Factory {

        }

        '
        ' Associations
        '

        AIChannel <|-- AbstractObject
        AChannel <|.. AIChannel
        IChannel <|.. AIChannel
        DAQ.Factory <|.. Factory

        '
        ' Notes
        '
    }
    /'
    package "Log" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }

    package "Net" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }
    '/
}

@enduml
